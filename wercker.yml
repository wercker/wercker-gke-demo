build# This Pipeline is run whenever a new git commit is pushed.
build:
    box: python:2.7
    steps:
    # Check that our application's tests are passing. Since this is a python
    # application, our entry script will also install the application's dependencies
    # with Virtualenv
    - script:
        name: Nose tests
        code: bin/tests

    - create-file:
        name: Create a message file.
        filename: hello/message.cfg
        overwrite: false
        content: Hi! This message will be written to the message config file!

    - script:
        # Pass tested soruce on to the image push.
        name: Tar and pass to output dir
        code: tar -czvf output.tar.gz * && mv output.tar.gz $WERCKER_OUTPUT_DIR
## End Pipeline ##


# This pipeline will be chained to start at the end of a build pipeline in the
# Wercker Web Workflows editor.
push-dockerhub:
    box: python:2.7
    steps:
    - script:
        # Untar the output from the last pipeline
        name: Untar
        code: tar -xzvf ./output.tar.gz && rm output.tar.gz

    # Create a docker image, and push it to the Docker Hub.
    - internal/docker-push:
        entrypoint: bin/hello
        cmd: 0.0.0.0 8080 ../hello/message.cfg
        working-dir: $WERCKER_ROOT
        tag: $WERCKER_GIT_COMMIT
        ports: "8080"
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD
        repository: $DOCKERHUB_REPOSITORY
        registry: https://registry.hub.docker.com
## End Pipeline ##


# This pipeline will be called manually or at the end of the push-dockerhub pipeline,
# as defined in the Wercker Web Workflows editor.
deploy-to-kubernetes:
    # We only need a minimal shell environment to run Kubectl.
    box:
        id: alpine
        cmd: /bin/sh
    steps:

    # Create some Kubernetes authentications certificates to interact with.
    - create-file:
        name: Create Kubernetes CA
        filename: ca.pem
        overwrite: true
        content: $KUBERNETES_CA

    - create-file:
        name: Create Kubernetes Client Cert
        filename: cert.pem
        overwrite: true
        content: $KUBERNETES_CLIENT_CERT

    - create-file:
        name: Create Kubernetes Client Key
        filename: key.pem
        overwrite: true
        content: $KUBERNETES_CLIENT_KEY

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes

    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $KUBERNETES_MASTER
        certificate-authority: ca.pem
        client-certificate: cert.pem
        client-key: key.pem
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
## End Pipeline ##